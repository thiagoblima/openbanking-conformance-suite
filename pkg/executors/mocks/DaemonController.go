// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	results "bitbucket.org/openbankingteam/conformance-suite/pkg/executors/results"
	mock "github.com/stretchr/testify/mock"
)

// DaemonController is an autogenerated mock type for the DaemonController type
type DaemonController struct {
	mock.Mock
}

// AddResult provides a mock function with given fields: result
func (_m *DaemonController) AddResult(result results.TestCase) {
	_m.Called(result)
}

func (_m *DaemonController) AddResponseFields(result string) {
	_m.Called(result)
}
func (_m *DaemonController) ResponseFieldsJSON() string {
	_m.Called()
	return ""
}

// AllResults provides a mock function with given fields:
func (_m *DaemonController) AllResults() []results.TestCase {
	ret := _m.Called()

	var r0 []results.TestCase
	if rf, ok := ret.Get(0).(func() []results.TestCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]results.TestCase)
		}
	}

	return r0
}

// AllResultsGrouped provides a mock function with given fields:
func (_m *DaemonController) AllResultsGrouped() map[results.ResultKey][]results.TestCase {
	ret := _m.Called()

	var r0 map[results.ResultKey][]results.TestCase
	if rf, ok := ret.Get(0).(func() map[results.ResultKey][]results.TestCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[results.ResultKey][]results.TestCase)
		}
	}

	return r0
}

// IsCompleted provides a mock function with given fields:
func (_m *DaemonController) IsCompleted() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// Results provides a mock function with given fields:
func (_m *DaemonController) Results() <-chan results.TestCase {
	ret := _m.Called()

	var r0 <-chan results.TestCase
	if rf, ok := ret.Get(0).(func() <-chan results.TestCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan results.TestCase)
		}
	}

	return r0
}

// SetCompleted provides a mock function with given fields:
func (_m *DaemonController) SetCompleted() {
	_m.Called()
}

// ShouldStop provides a mock function with given fields:
func (_m *DaemonController) ShouldStop() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *DaemonController) Stop() {
	_m.Called()
}

// Stopped provides a mock function with given fields:
func (_m *DaemonController) Stopped() {
	_m.Called()
}
